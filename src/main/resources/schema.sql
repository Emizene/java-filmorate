CREATE TABLE IF NOT EXISTS mpa_rating
    (id BIGINT PRIMARY KEY,
    name VARCHAR(50) NOT NULL);

CREATE TABLE IF NOT EXISTS genres
    (id BIGINT PRIMARY KEY,
    name VARCHAR(100) NOT NULL);

CREATE TABLE IF NOT EXISTS users
    (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    login VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    birthday DATE NOT NULL,
    CONSTRAINT valid_email CHECK (email LIKE '%@%.%'),
    CONSTRAINT future_birthday CHECK (birthday <= CURRENT_DATE));

CREATE TABLE IF NOT EXISTS user_friends
    (user_id BIGINT,
    friend_id BIGINT,
    PRIMARY KEY (user_id, friend_id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (friend_id) REFERENCES users(id) ON DELETE CASCADE);

CREATE TABLE IF NOT EXISTS films
   (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(200) NOT NULL,
    description TEXT,
    release_date DATE NOT NULL,
    duration BIGINT NOT NULL,
    rating_id VARCHAR(10),
    CONSTRAINT positive_duration CHECK (duration > 0),
    CONSTRAINT valid_release_date CHECK (release_date >= '1895-12-28'),
    FOREIGN KEY (rating_id) REFERENCES mpa_rating(id));

CREATE TABLE IF NOT EXISTS film_genres
    (film_id BIGINT NOT NULL,
    genre_id BIGINT NOT NULL,
    PRIMARY KEY (film_id, genre_id),
    FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genres(id) ON DELETE CASCADE);

CREATE TABLE IF NOT EXISTS likes
    (film_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    PRIMARY KEY (film_id, user_id),
    FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);

CREATE TABLE IF NOT EXISTS reviews
   (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   review TEXT NOT NULL,
   is_positive BOOLEAN NOT NULL,
   film_id BIGINT NOT NULL,
   user_id BIGINT NOT NULL,
   FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
   FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);

-- CREATE TABLE reviews
-- (
--     id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
--     review      VARCHAR(200),
--     is_positive BOOLEAN                                 NOT NULL,
--     film        BIGINT,
--     "user"      BIGINT,
--     CONSTRAINT pk_reviews PRIMARY KEY (id)
-- );
--
-- ALTER TABLE reviews
--     ADD CONSTRAINT FK_REVIEWS_ON_FILM FOREIGN KEY (film) REFERENCES films (id);
--
-- ALTER TABLE reviews
--     ADD CONSTRAINT FK_REVIEWS_ON_USER FOREIGN KEY ("user") REFERENCES users (id);

-- CREATE TABLE review_rating
-- (
--     id        BIGINT NOT NULL,
--     review_id BIGINT,
--     CONSTRAINT pk_review_rating PRIMARY KEY (id)
-- );
--
-- CREATE TABLE review_rating_users
-- (
--     review_rating_id BIGINT NOT NULL,
--     users_id         BIGINT NOT NULL,
--     CONSTRAINT pk_review_rating_users PRIMARY KEY (review_rating_id, users_id)
-- );
--
-- ALTER TABLE review_rating_users
--     ADD CONSTRAINT uc_review_rating_users_users UNIQUE (users_id);
--
-- ALTER TABLE review_rating
--     ADD CONSTRAINT FK_REVIEW_RATING_ON_REVIEW FOREIGN KEY (review_id) REFERENCES reviews (id);
--
-- ALTER TABLE review_rating_users
--     ADD CONSTRAINT fk_revratuse_on_review_rating FOREIGN KEY (review_rating_id) REFERENCES review_rating (id);
--
-- ALTER TABLE review_rating_users
--     ADD CONSTRAINT fk_revratuse_on_user FOREIGN KEY (users_id) REFERENCES users (id);

-- CREATE TABLE IF NOT EXISTS review_likes
--    (review_id BIGINT NOT NULL,
--    user_id BIGINT NOT NULL,
--    PRIMARY KEY (review_id, user_id),
--    FOREIGN KEY (review_id) REFERENCES reviews(id) ON DELETE CASCADE,
--    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);
--
-- CREATE TABLE IF NOT EXISTS review_dislikes
--    (review_id BIGINT NOT NULL,
--    user_id BIGINT NOT NULL,
--    PRIMARY KEY (review_id, user_id),
--    FOREIGN KEY (review_id) REFERENCES reviews(id) ON DELETE CASCADE,
--    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);

-- CREATE TABLE IF NOT EXISTS review_likes
-- (film_id BIGINT NOT NULL,
--  user_id BIGINT NOT NULL,
--  PRIMARY KEY (film_id, user_id),
--     FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
--     FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);
--
-- CREATE TABLE IF NOT EXISTS review_dislikes
-- (film_id BIGINT NOT NULL,
--  user_id BIGINT NOT NULL,
--  PRIMARY KEY (film_id, user_id),
--     FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
--     FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);
